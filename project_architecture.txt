# Standard Chinese Platform - Project Architecture

## Overview
A web-based language learning platform that modernizes the Foreign Service Institute's "Standard Chinese: A Modular Approach" course, featuring a cassette tape vintage aesthetic. Built with SvelteKit, Tailwind CSS, and Supabase.

## Tech Stack
- **Frontend**: SvelteKit 5.0, Svelte 5.0
- **Styling**: Tailwind CSS 4.0
- **Database**: Supabase
- **Authentication**: Supabase Auth
- **API**: SvelteKit endpoints (serverless functions)
- **Email**: EmailJS
- **Deployment**: Vercel

## Project Structure

### Core Files
- `/app.html` - HTML template with entry point
- `/app.css` - Global CSS styles
- `/package.json` - Project dependencies and scripts
- `/svelte.config.js` - SvelteKit configuration
- `/vite.config.js` - Vite bundler configuration
- `/jsconfig.json` - JavaScript configuration for editor support

### Source Code (/src)
1. **/lib** - Library code and components
   - **/components** - Reusable Svelte components
     - `/AudioPlayer.svelte` - Audio playback for Chinese dialogues
     - `/Auth.svelte` - Authentication component
     - `/CassetteTapeSelector.svelte` - Vintage tape UI for selecting content
     - `/DialogueDisplay.svelte` - Displays dialogue with Chinese text and translations
     - `/ExercisesTab.svelte` - Practice exercises component
     - `/FlashcardDeck.svelte` - Flashcard study system
     - `/ModuleQuestions.svelte` - Questions for module assessment
     - `/ResourceModuleCard.svelte` - Card UI for resource modules
     - `/ReviewTab.svelte` - Review functionality
     - `/UnitContent.svelte` - Content display for learning units
     - `/VocabularyTab.svelte` - Vocabulary learning interface
     
     - **/UI** - Low-level UI components
       - `/Breadcrumb.svelte` - Navigation breadcrumb
       - `/ChineseText.svelte` - Special component for displaying Chinese characters
       - `/ChunkByPinyin.svelte` - Breaks text into pinyin chunks
       - `/ConfirmationModal.svelte` - Confirmation dialog
       - `/FontToggle.svelte` - Toggle between simplified/traditional Chinese
       - `/Header.svelte` - Site header
       - `/Loader.svelte` - Loading indicator
       - `/MobileMenu.svelte` - Responsive mobile navigation menu
       - `/ModuleCard.svelte`, `/UnitCard.svelte` - Cards for modules and units
       - `/ModuleDropdown.svelte`, `/UnitDropdown.svelte` - Dropdown selectors
       - `/NavigationItem.svelte` - Navigation item component
       - `/TabSelector.svelte` - Tab interface component
       - `/TapeConstruction.svelte` - Cassette tape visual element
       - `/Toast.svelte` - Toast notification component
       - `/UnitProgressButton.svelte` - Progress indicator button
     
     - **/profile** - User profile components
       - `/AccountTab.svelte` - Account settings
       - `/ContextModulesTab.svelte` - Contextual learning modules
       - `/FeedbackTab.svelte` - User feedback interface
       - `/LearningProfileTab.svelte` - Learning preferences
     
     - **/rwp** - "Relevant World Practice" components
       - `/ComprehensionExercise.svelte` - Comprehension practice
       - `/ListeningTab.svelte` - Listening practice
       - `/QuizTab.svelte` - Quiz interface
       - `/StoryTape.svelte` - Story-based learning component
   
   - **/stores** - Svelte stores for state management
     - `/authStore.js` - Authentication state
     - `/fontPreferences.js` - Chinese character display preferences
     - `/quizStore.js` - Quiz state management
   
   - **/supabase** - Database integration
     - `/client.js` - Supabase client initialization
   
   - **/rwp** - Relevant World Practice implementation
     - `/rwpGenerator.js` - Generator for personalized practice

   - `/apiClient.js` - Client for API interactions
   - `/index.js` - Library exports

2. **/routes** - SvelteKit routes (pages and API endpoints)
   - `/+layout.svelte` - Root layout for all pages
   - `/+page.svelte` - Home page
   
   - **/api** - Backend API endpoints
     - **/rwp** - Relevant World Practice API
       - `/analyze-story/+server.js` - Story analysis endpoint
       - `/create-questions/+server.js` - Question generation endpoint
       - `/format-exercise/+server.js` - Exercise formatting endpoint
       - `/generate-story/+server.js` - Story generation endpoint
     - **/tts** - Text-to-speech API
       - `/+server.js` - TTS endpoint
   
   - **/login** - Authentication routes
     - `/+page.svelte` - Login page
     - **/profile** - User profile pages
       - `/+page.server.js` - Server-side profile logic
       - `/+page.svelte` - Profile page
   
   - **/modules** - Learning modules
     - `/+page.svelte` - Modules listing page
     - `/[id]/+page.svelte` - Individual module page
   
   - **/policies** - Policy pages
     - `/+page.svelte` - Policies display
   
   - **/reset-password** - Password reset functionality
     - `/+page.svelte` - Password reset page
   
   - **/resource** - Learning resources
     - `/+page.svelte` - Resources listing
     - `/[id]/+page.js` - Resource data loading
     - `/[id]/+page.svelte` - Individual resource page
     - `/more-info/+page.svelte` - Additional resource information
   
   - **/rwp** - Relevant World Practice pages
     - `/+page.svelte` - RWP home page
     - `/[unit_id]/+layout.js` - Unit-specific layout logic
     - `/[unit_id]/+page.svelte` - Unit-specific RWP page
     - `/demo/+page.svelte` - RWP demo page
   
   - **/units** - Learning units
     - `/[id]/+page.svelte` - Individual unit page

### Static Assets (/static)
- Favicons and app icons
- **/images** - Site images
  - `chinese-calligraphy.jpg`
  - `vintage-cassette.png`
  - `vintage-cassette2.png`
- **/textures** - Background textures
  - `subtle-paper.png`
  - `subtle-paper2.png`

### Database (/supabase)
- `/schema.sql` - Database schema definition

## Key Features
1. Toggle between simplified/traditional Chinese characters
2. Integrated audio playback for dialogues and exercises
3. LLM integration for personalized practice (Relevant World Practice)
4. User accounts with progress tracking
5. Vintage cassette tape aesthetic UI
6. Mobile-responsive design

## Developer Workflow
- Development: `npm run dev`
- Build: `npm run build`
- Preview production: `npm run preview`
- Code formatting: `npm run format`
- Linting: `npm run lint`