
# Taped Chinese Learning Platform Project Description

I'm developing a web-based language learning platform that modernizes the Foreign Service Institute's "Standard Chinese: A Modular Approach" course materials. Built with SvelteKit, Tailwind CSS, and Supabase, this application digitizes textbook content and audio recordings from the comprehensive FSI course used to train diplomats. The content follows the original structure of 9 core modules, but I want it presented in an accessible, interactive format. Key features include toggling between simplified/traditional Chinese characters, integrated audio playback for dialogues and exercises, LLM integration for practice which incorporates learners context (Revelvant World Practice), and eventually user accounts to track progress. I'm prioritizing a clean, intuitive UI that allows users to navigate freely between modules. Being that this uses old tapes, the website has a cassette tape vintage aesthetic. As a solo developer learning fullstack development, I'm focusing on getting core feautures in and digitizing the content as an MVP, I want to make sure that this looks nice and cohesive. The platform will always maintain free access to the core FSI materials, with potential premium features like LLM-generated personalized exercises added later.



## Project Architecture

```
fsi-chinese-learning/
├── src/
│   ├── lib/
│   │   ├── components/
│   │   │   ├── AudioPlayer.svelte               # Audio playback component
│   │   │   ├── Breadcrumb.svelte                # Audio playback component
│   │   │   ├── CassetteTapeSelector.svelte
│   │   │   ├── ChineseText.svelte               # Chinese text display with font options
│   │   │   ├── DialogueDisplay.svelte
│   │   │   ├── ExerciseTab.svelte
│   │   │   ├── FlashcardDeck.svelte
│   │   │   ├── FontToggle.svelte                # Toggle for character/pinyin display
│   │   │   ├── Header.svelte                    # Site header with navigation
│   │   │   ├── Loader.svelte                   # Cassette tape loading animation        
│   │   │   ├── ReviewTab.svelte
│   │   │   ├── TabSelector.svelte
│   │   │   ├── UnitCard.svelte
│   │   │   ├── UnitContent.svelte               # Main content display for units
│   │   │   ├── VocabularyTab.svelte
│   │   │   └── QuestionTypes/
│   │   │       ├── DisplayOnlyQuestion.svelte
│   │   │       ├── MultipleChoiceQuestion.svelte
│   │   │       ├── ShortAnswerQuestion.svelte
│   │   │       └── TableRowQuestion.svelte
│   │   ├── stores/
│   │   │   └── fontPreferences.js               # Store for font settings
│   │   └── supabase/
│   │       └── client.js                        # Supabase connection and functions
│   └── routes/
│       ├── +layout.svelte                       # Main layout with header & navigation
│       ├── +page.svelte                         # Home page
│       ├── guidebook/
│       │   ├── +page.svelte             # Blog type guidebook with helpful langauge learning write-ups
│       ├── modules/
│       │   ├── +page.svelte                     # All modules listing
│       │   └── [id]/                            # Single module view
│       │       └── +page.svelte
│       ├── rwp/
│       │   ├── +page.svelte             # Main RWP landing/explanation page
│       │   └── [unit_id]/                # RWP for specific unit
│       │       └── +page.svelte
│       └── units/                               # All units are at the same level
│           └── [id]/                            # Individual unit page with tabs
│               └── +page.svelte                 # Contains vocabulary, tapes, exercises as tabs
├── static/
│   └── fonts/                                   # Chinese font files
└── supabase/
    └── schema.sql                               # Database schema definitions
````

RWP Implementation
<a href="/rwp/{unitId}">Practice with RWP</a>

**Database Schema**
```sql
-- Modules table (top level course organization)
CREATE TABLE public.modules (
  id SERIAL PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  module_type module_type NOT NULL DEFAULT 'core',
  order_num INTEGER NOT NULL
);
COMMENT ON TABLE public.modules IS 'Top-level course organization (9 core modules)';


-- Units table (sections within modules)
CREATE TABLE public.units (
  id SERIAL PRIMARY KEY,
  module_id INTEGER NOT NULL REFERENCES public.modules(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  order_num INTEGER NOT NULL,
  UNIQUE (module_id, order_num)
);
COMMENT ON TABLE public.units IS 'Units within modules (typically 4-9 units per module)';


-- Vocabulary table
CREATE TABLE public.vocabulary (
  id SERIAL PRIMARY KEY,
  unit_id INTEGER NOT NULL REFERENCES public.units(id) ON DELETE CASCADE,
  chinese_simplified TEXT NOT NULL,
  chinese_traditional TEXT,  
  pinyin TEXT NOT NULL,
  english TEXT NOT NULL,
  order_num INTEGER NOT NULL
);
COMMENT ON TABLE public.vocabulary IS 'Vocabulary words for each unit';


-- Tapes table (audio recordings)
CREATE TABLE public.tapes (
  id SERIAL PRIMARY KEY,
  unit_id INTEGER NOT NULL REFERENCES public.units(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  tape_type tape_type NOT NULL,
  audio_file TEXT,
  order_num INTEGER NOT NULL,
  UNIQUE (unit_id, title)
);
COMMENT ON TABLE public.tapes IS 'Audio recordings for each unit (review tapes and workbook exercise tapes)';


-- Reference list (dialogues)
CREATE TABLE public.reference_list (
  id SERIAL PRIMARY KEY,
  unit_id INTEGER NOT NULL REFERENCES public.units(id) ON DELETE CASCADE,
  number INTEGER NOT NULL,  
  chinese_simplified TEXT NOT NULL,
  chinese_traditional TEXT,
  pinyin TEXT NOT NULL,
  english TEXT NOT NULL,
  notes TEXT,
  order_num INTEGER NOT NULL,
  UNIQUE (unit_id, number)
);
COMMENT ON TABLE public.reference_list IS 'Reference dialogues for each unit;


-- Exercises table
CREATE TABLE public.exercises (
  id SERIAL PRIMARY KEY,
  tape_id INTEGER NOT NULL REFERENCES public.tapes(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  exercise_type exercise_type NOT NULL,
  instructions TEXT,
  display_url TEXT,
  order_num INTEGER NOT NULL,
  UNIQUE (tape_id, order_num)
);
COMMENT ON TABLE public.exercises IS 'Language exercises tied to specific workbook tapes';


-- Exercise questions table
CREATE TABLE public.exercise_questions (
  id SERIAL PRIMARY KEY,
  exercise_id INTEGER NOT NULL REFERENCES public.exercises(id) ON DELETE CASCADE,
  question_text TEXT NOT NULL,
  question_type question_type NOT NULL,
  options TEXT,
  order_num INTEGER NOT NULL,
  UNIQUE (exercise_id, order_num)
);
COMMENT ON TABLE public.exercise_questions IS 'Individual questions within exercises';
COMMENT ON COLUMN public.exercise_questions.exercise_id IS 'Reference to parent exercise';
COMMENT ON COLUMN public.exercise_questions.question_text IS 'The question text';
COMMENT ON COLUMN public.exercise_questions.question_type IS 'Type: multiple_choice, short_answer, or table_row';
COMMENT ON COLUMN public.exercise_questions.options IS 'For multiple_choice: "Option 1|Option 2|Option 3"';
COMMENT ON COLUMN public.exercise_questions.order_num IS 'Sequence order within exercise';






Phases

3. **Build Core Components**
- Create layout components (header, navigation, footer)
- Build a font switcher component for traditional/simplified and pinyin toggling
- Develop audio player component with playback controls

### Phase 2: Content Structure Implementation

1. **Create Basic Routes**
- Home page with introduction
- Modules listing page
- Unit detail page
- Tape content page

2. **Implement Module 6 Content**
- Format and upload text content to Supabase
- Process and upload audio files to Supabase storage
- Create content display components for different types:
- Dialogue presentations
- Vocabulary lists
- Exercise sections

3. **Develop Content Navigation**
- Module selection
- Unit navigation within modules
- Tab-based navigation within units (comprehension, production, vocabulary, etc.)

### Phase 3: Core User Experience

1. **Font Switching System**
- Create a store to manage font preferences
- Implement toggle between simplified and traditional characters
- Add option to show/hide pinyin

2. **Audio Integration**
- Develop audio player with tape playback
- Add features like repeat, speed control, and section looping

3. **Basic Exercise Framework**
- Create components for displaying exercise questions
- Build simple input components for user answers
- Implement basic exercise navigation

### Phase 4: Refinement and Polish

1. **UI/UX Improvements**
- Enhance visual design with consistent styling
- Optimize layout for different screen sizes
- Improve navigation and user flow

2. **Content Testing**
- Verify all content displays correctly
- Test audio playback functionality
- Review exercise questions and content flow

3. **Deployment**
- Set up Vercel deployment
- Configure environment variables
- Deploy MVP version



## Advanced Features (Future Implementation)

After completing the MVP with Module 6, you can expand your application with:

### 1. User Authentication
- Implement Supabase Auth for user login/signup
- Create user profiles and preferences storage

### 2. Progress Tracking
- Add a "completed" status for units and tapes
- Create a progress dashboard for users

### 3. Exercise System
- Implement the FSI workbook questions
- Add form inputs for user answers
- Save user responses to the database

### 4. LLM Integration
- Connect to an LLM API for generating personalized exercises
- Create a system to use user bio information for customization

### 5. User Bio System
- Create forms for collecting user information
- Store and retrieve this information for personalized content

## Development Best Practices

1. **Start Simple**: Begin with static content and basic styling
2. **Modular Components**: Build reusable components that can be combined in different ways
3. **Progressive Enhancement**: Add features incrementally as you get comfortable
4. **Version Control**: Make small, meaningful commits with clear messages
5. **Testing**: Regularly test your application to catch issues early
6. **Documentation**: Add comments to your code and maintain a README