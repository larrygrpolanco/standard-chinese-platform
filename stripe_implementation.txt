# File Implementation Checklist for Subscription Service

## 1. Database Setup

**SQL for Supabase:**
- **Purpose:** Creates necessary tables for subscription management and usage tracking
- **Functions:** Stores subscription data, tracks feature usage counts, and manages reset timers

```sql
-- User subscriptions table
create table public.user_subscriptions (
  user_id uuid not null,
  stripe_customer_id text null,
  stripe_subscription_id text null,
  subscription_status text not null default 'free'::text,
  current_period_start timestamp without time zone null,
  current_period_end timestamp without time zone null,
  cancel_at_period_end boolean null default false,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint user_subscriptions_pkey primary key (user_id),
  constraint user_subscriptions_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

-- Feature usage table
create table public.feature_usage (
  user_id uuid not null,
  rwp_count integer null default 0,
  tts_count integer null default 0,
  rwp_reset_at timestamp without time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint feature_usage_pkey primary key (user_id),
  constraint feature_usage_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;
```

## 2. Configuration File

**`src/lib/stripe/config.js`**
- **Purpose:** Centralizes subscription limits and product information
- **Functions:** Makes it easy to adjust limits throughout the application

## 3. Usage Tracking System

**`src/lib/usage/usageTracking.js`**
- **Purpose:** Provides functions to check and manage feature usage
- **Functions:**
  - `canUseFeature()`: Determines if a user can use a specific feature (rwp/tts)
  - `incrementUsage()`: Records feature usage
  - `getUserUsageStats()`: Gets overall usage statistics for display

## 4. Stripe Integration

**`src/routes/api/stripe/create-checkout/+server.js`**
- **Purpose:** Creates Stripe checkout sessions
- **Functions:** Redirects users to Stripe payment page

**`src/routes/api/stripe/create-portal/+server.js`**
- **Purpose:** Creates Stripe customer portal sessions
- **Functions:** Lets subscribers manage their subscription

**`src/routes/api/stripe/webhook/+server.js`**
- **Purpose:** Handles Stripe webhook events
- **Functions:** Updates subscription status in database when changes occur

## 5. Usage Statistics API

**`src/routes/api/user/usage-stats/+server.js`**
- **Purpose:** Provides user's current usage information
- **Functions:** Returns subscription status, usage counts, and limits

## 6. UI Components

**`src/lib/components/Subscription/SubscriptionModal.svelte`**
- **Purpose:** Reusable modal to display subscription options
- **Functions:** Shows different content based on subscription status, handles upgrading

## 7. Updated Components

**`src/lib/rwp/rwpGenerator.js`** (Modified)
- **Purpose:** Added permission checks before generating RWP content
- **Functions:** Verifies user can use feature, increments usage after generation

**`src/lib/components/profile/AccountTab.svelte`** (Modified)
- **Purpose:** Updated to show subscription info and usage statistics
- **Functions:** Displays usage meters, handles subscription management

**`src/routes/rwp/[unit_id]/+page.svelte`** (Modified)
- **Purpose:** Added subscription handling for RWP generation
- **Functions:** Shows subscription modal when limits are reached

**`src/lib/components/rwp/StoryTape.svelte`** (Modified)
- **Purpose:** Added permission checks for TTS feature
- **Functions:** Restricts TTS to premium users, shows subscription modal when needed

## 8. Environment Variables

**.env files**
- **Purpose:** Stores sensitive Stripe credentials
- **Variables:**
  - `STRIPE_PUBLIC_KEY` - For client-side Stripe integration
  - `STRIPE_SECRET_KEY` - For server-side API calls
  - `STRIPE_WEBHOOK_SECRET` - For webhook verification

## Debugging Tips

1. **Database Issues:**
   - Check Supabase tables were created properly
   - Verify user IDs match between auth.users and your custom tables

2. **Stripe Integration:**
   - Use Stripe CLI to test webhooks locally
   - Check Events log in Stripe Dashboard

3. **Permission Issues:**
   - Add console logs in `canUseFeature()` to see exact permission results
   - Verify usage counts are being incremented correctly

4. **Usage Tracking:**
   - Monitor the `feature_usage` table to ensure counts are updated
   - Check that weekly reset times are being set and processed correctly

5. **UI Problems:**
   - Check browser console for errors
   - Use Svelte's reactive debugging to check variable states

Each file works together to create a cohesive subscription system that manages access to premium features while providing clear feedback to users about their usage and options.